{
    "id": "e13d317fe0178a8b8b67f4af995e7fac12c35014",
    "title": "Analysis of Tree-Structured Architectures for Code Generation",
    "abstract": "Code generation is the task of generating code snippets from input user speci\ufb01cations in nat-ural language. Leveraging the linguistically-motivated hierarchical structure of the input can bene\ufb01t code generation, especially since the speci\ufb01cations are complex sentences containing multiple variables and operations over various data structures. Moreover, recent advances in Transformer architectures have led to improved performance with tree-to-tree style generation for other seq2seq tasks e.g., machine translation. Hence, we present an empirical analysis of the signi\ufb01cance of input parse trees for code generation. We run text-to-tree, linearized tree-to-tree, and structured tree-to-tree models, using constituency-based parse trees as input, where the target is Ab-stract Syntax Tree (AST) of the code. We evaluate our models on the Python-based code generation dataset CoNaLa and a semantic parsing dataset ATIS. We \ufb01nd that constituency trees encoded using a structure-aware model improve performance for both datasets. We also provide an analysis of those aspects of the input parse trees which are most impact-ful. For instance, we \ufb01nd that structure-aware encodings are better at modelling inputs with multiple variables and capturing long-range dependencies for code generation. 1"
}