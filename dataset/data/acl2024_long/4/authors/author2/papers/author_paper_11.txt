{
    "id": "ae75767ae41abca0186d9e6ef10d34d3602c0e27",
    "title": "SmellDetector: Code Smell Detection and Refactoring with Large Language Models",
    "abstract": "Large Language Models (LLMs) have demon-001 strated impressive capabilities in many tasks 002 such as code generation and automated pro-003 gram repair. However, code LLMs have ig-004 nored another important task in programmers\u2019 005 daily development work, which is to improve 006 the maintainability, readability, and scalability 007 of the program. All of these characteristics 008 are related to code smells and we study how 009 to improve them by detecting and removing 010 code smells. Most works on code smells still 011 rely on using measures formulated by experts 012 as features, but lack of use of the rich prior 013 knowledge contained in code LLMs. In this 014 paper, we propose SmellDetector, a compre-015 hensive model for both code smell detection 016 and refactoring opportunities detection in Java. 017 We train the model with the designed prompt 018 which contains both code smells of class-level 019 and method-level in the same code snippet, in-020 cluding more than 20 types. We achieve state-021 of-the-art performance on the code smell detec-022 tion task and change the basic paradigm of code 023 smell detection from binary classification prob-024 lem to multi-label classification. Finally, it has 025 been verified through experiments that good 026 code smell detection helps to detect refactoring 027 opportunities. 028"
}