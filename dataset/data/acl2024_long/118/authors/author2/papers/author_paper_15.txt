{
    "id": "9c56d82f6b7dcd79705a9e6e5bc784681acf4f78",
    "title": "Enhancing Code Generation Performance of Smaller Models by Distilling the Reasoning Ability of LLMs",
    "abstract": "Large Language Models (LLMs) have recently made significant advances in code generation through the \u2018Chain-of-Thought\u2019 prompting technique. This technique empowers the model to autonomously devise \u201csolution plans\u201d to tackle intricate programming challenges, thereby improving its performance in code generation. Nevertheless, smaller models have been struggling to keep up with LLMs in deducing these plans, adversely affecting their code generation capabilities. Given the considerable size and associated deployment costs, along with concerns about data security, many teams opt for deploying smaller models for code generation. Consequently, there arises a compelling need for transferring LLMs\u2019 code generation reasoning abilities to the smaller models. In this paper, we propose the CodePLAN framework, which aims to transfer LLMs\u2019 reasoning capabilities to smaller models through distillation. We adopt a multi-task learning approach, jointly undertaking code generation and solution plan generation tasks, to enhance the code generation capabilities of smaller model. To ensure the superior quality of the solution plans, we advocate for the utilization of backward reasoning and plan sampling strategies. Our experiments show that in comparison to the conventional fine-tuning approach, our approach improves the smaller model\u2019s code generation performance (measured in pass@1 metric) by over 130% on the challenging APPS benchmark."
}