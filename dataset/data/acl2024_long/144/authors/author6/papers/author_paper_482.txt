{
    "id": "7aeb12908aeeff20c9fc1e68806aa68ac3053d1b",
    "title": "Towards self-managing computing systems: an augmented control theory approach",
    "abstract": "Computing systems are becoming increasingly large and complex, making their performance less predictable and their management more challenging and costly. To achieve performance assurances while cutting management cost, computing systems are needed that can continually manage their performance in the face of changing computing demands and environmental conditions; an architectural paradigm called \"Autonomic Computing\". Towards building autonomic computing systems, we develop a new analytic foundation for automatic performance regulation in software services based on feedback control theory. A novel performance control architecture (PCA) is proposed as a general framework for providing robust performance assurance in open real-time computing systems where neither a priori system knowledge nor fine system models are available. \nPCA features an adaptive architecture based on the integration of model-based feedforward control and self-adaptive feedback control. By utilizing the complementary natures of feedforward and feedback control, PCA combines the advantages of both and provides practical solutions to performance assurance. Unlike heuristic-based adaptive mechanisms, PCA is guided by well-established theories. Another highlight of PCA lies in the methodology for building self-tuning performance regulators. Traditional performance control mechanisms often require knowledge of platform capacity and resource demand, which calls for performance measurements and profiling upon platform upgrades, failures, or new installations. To automate the process through self-learning and self-adjusting, PCA employs an approach based on adaptive control theory, where the performance regulator automatically builds a system model and maintains the system performance at a satisfactory level. \nIn the dissertation, we present our performance control framework and the methodology for applying it to current software service architectures. Specifically, we show how to build the right sensors and monitors, use the available software performance actuators, map performance regulation to a feedback control problem, model the computing system, and design control modules to achieve performance specifications. Following this methodology, we successfully provide robust Web performance control under significant load and resource uncertainties. Two applications are illustrated. They are robust delay control in Web server systems and robust hit rate control in a Squid proxy cache. They demonstrate the success of the control theory approach in providing a flexible range of performance assurances in an adaptive manner at minimum cost."
}